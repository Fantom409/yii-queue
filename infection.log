Escaped mutants:
================

1) /app/src/Driver/SynchronousDriver.php:69    [M] Plus

--- Original
+++ New
@@ @@
     }
     public function push(MessageInterface $message) : string
     {
-        $key = count($this->messages) + $this->current;
+        $key = count($this->messages) - $this->current;
         $this->messages[] = $message;
         return (string) $key;
     }


2) /app/src/Exception/PayloadNotSupportedException.php:25    [M] OneZeroInteger

--- Original
+++ New
@@ @@
 {
     private DriverInterface $driver;
     private PayloadInterface $payload;
-    public function __construct(DriverInterface $driver, PayloadInterface $payload, string $message = '', int $code = 0, Throwable $previous = null)
+    public function __construct(DriverInterface $driver, PayloadInterface $payload, string $message = '', int $code = 1, Throwable $previous = null)
     {
         if ($message === '') {
             $driverClass = get_class($driver);


3) /app/src/Exception/PayloadNotSupportedException.php:25    [M] DecrementInteger

--- Original
+++ New
@@ @@
 {
     private DriverInterface $driver;
     private PayloadInterface $payload;
-    public function __construct(DriverInterface $driver, PayloadInterface $payload, string $message = '', int $code = 0, Throwable $previous = null)
+    public function __construct(DriverInterface $driver, PayloadInterface $payload, string $message = '', int $code = -1, Throwable $previous = null)
     {
         if ($message === '') {
             $driverClass = get_class($driver);


4) /app/src/Queue.php:60    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function jobRetry(JobFailure $event) : void
     {
-        if ($event->getQueue() === $this && !$event->getException() instanceof PayloadNotSupportedException && ($event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] ?? 0) > 0) {
+        if ($event->getQueue() === $this && !$event->getException() instanceof PayloadNotSupportedException && ($event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] ?? -1) > 0) {
             $event->preventThrowing();
             $attemptsLeft = $event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] - 1;
             $payload = $this->messageConvert($event->getMessage(), [PayloadInterface::META_KEY_ATTEMPTS => $attemptsLeft]);


5) /app/src/Queue.php:60    [M] GreaterThan

--- Original
+++ New
@@ @@
     }
     public function jobRetry(JobFailure $event) : void
     {
-        if ($event->getQueue() === $this && !$event->getException() instanceof PayloadNotSupportedException && ($event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] ?? 0) > 0) {
+        if ($event->getQueue() === $this && !$event->getException() instanceof PayloadNotSupportedException && ($event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] ?? 0) >= 0) {
             $event->preventThrowing();
             $attemptsLeft = $event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] - 1;
             $payload = $this->messageConvert($event->getMessage(), [PayloadInterface::META_KEY_ATTEMPTS => $attemptsLeft]);


6) /app/src/Queue.php:60    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     }
     public function jobRetry(JobFailure $event) : void
     {
-        if ($event->getQueue() === $this && !$event->getException() instanceof PayloadNotSupportedException && ($event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] ?? 0) > 0) {
+        if ($event->getQueue() === $this && !$event->getException() instanceof PayloadNotSupportedException && ($event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] ?? 1) > 0) {
             $event->preventThrowing();
             $attemptsLeft = $event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] - 1;
             $payload = $this->messageConvert($event->getMessage(), [PayloadInterface::META_KEY_ATTEMPTS => $attemptsLeft]);


7) /app/src/Queue.php:63    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         if ($event->getQueue() === $this && !$event->getException() instanceof PayloadNotSupportedException && ($event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] ?? 0) > 0) {
             $event->preventThrowing();
-            $attemptsLeft = $event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] - 1;
+            $attemptsLeft = $event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] - 2;
             $payload = $this->messageConvert($event->getMessage(), [PayloadInterface::META_KEY_ATTEMPTS => $attemptsLeft]);
             $this->logger->debug('Retrying payload "{payload}".', ['payload' => $event->getMessage()->getPayloadName()]);
             $this->push($payload);


8) /app/src/Queue.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $event->preventThrowing();
             $attemptsLeft = $event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] - 1;
             $payload = $this->messageConvert($event->getMessage(), [PayloadInterface::META_KEY_ATTEMPTS => $attemptsLeft]);
-            $this->logger->debug('Retrying payload "{payload}".', ['payload' => $event->getMessage()->getPayloadName()]);
+            
             $this->push($payload);
         }
     }


9) /app/src/Queue.php:67    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $event->preventThrowing();
             $attemptsLeft = $event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] - 1;
             $payload = $this->messageConvert($event->getMessage(), [PayloadInterface::META_KEY_ATTEMPTS => $attemptsLeft]);
-            $this->logger->debug('Retrying payload "{payload}".', ['payload' => $event->getMessage()->getPayloadName()]);
+            $this->logger->debug('Retrying payload "{payload}".', []);
             $this->push($payload);
         }
     }


10) /app/src/Queue.php:67    [M] ArrayItem

--- Original
+++ New
@@ @@
             $event->preventThrowing();
             $attemptsLeft = $event->getMessage()->getPayloadMeta()[PayloadInterface::META_KEY_ATTEMPTS] - 1;
             $payload = $this->messageConvert($event->getMessage(), [PayloadInterface::META_KEY_ATTEMPTS => $attemptsLeft]);
-            $this->logger->debug('Retrying payload "{payload}".', ['payload' => $event->getMessage()->getPayloadName()]);
+            $this->logger->debug('Retrying payload "{payload}".', ['payload' > $event->getMessage()->getPayloadName()]);
             $this->push($payload);
         }
     }


11) /app/src/Queue.php:83    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function push(PayloadInterface $payload) : ?string
     {
-        $this->logger->debug('Preparing to push payload "{payload}".', ['payload' => $payload->getName()]);
+        
         $message = $this->payloadConvert($payload);
         $this->eventDispatcher->dispatch(new BeforePush($this, $message));
         if ($this->driver->canPush($message)) {


12) /app/src/Queue.php:83    [M] ArrayItem

--- Original
+++ New
@@ @@
      */
     public function push(PayloadInterface $payload) : ?string
     {
-        $this->logger->debug('Preparing to push payload "{payload}".', ['payload' => $payload->getName()]);
+        $this->logger->debug('Preparing to push payload "{payload}".', ['payload' > $payload->getName()]);
         $message = $this->payloadConvert($payload);
         $this->eventDispatcher->dispatch(new BeforePush($this, $message));
         if ($this->driver->canPush($message)) {


13) /app/src/Queue.php:83    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function push(PayloadInterface $payload) : ?string
     {
-        $this->logger->debug('Preparing to push payload "{payload}".', ['payload' => $payload->getName()]);
+        $this->logger->debug('Preparing to push payload "{payload}".', []);
         $message = $this->payloadConvert($payload);
         $this->eventDispatcher->dispatch(new BeforePush($this, $message));
         if ($this->driver->canPush($message)) {


14) /app/src/Queue.php:89    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->eventDispatcher->dispatch(new BeforePush($this, $message));
         if ($this->driver->canPush($message)) {
             $message->setId($this->driver->push($message));
-            $this->logger->debug('Successfully pushed message "{name}" to the queue.', ['name' => $message->getPayloadName()]);
+            
         } else {
             $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' => $payload->getName(), 'driver' => get_class($this->driver)]);
             throw new PayloadNotSupportedException($this->driver, $payload);


15) /app/src/Queue.php:91    [M] ArrayItem

--- Original
+++ New
@@ @@
         $this->eventDispatcher->dispatch(new BeforePush($this, $message));
         if ($this->driver->canPush($message)) {
             $message->setId($this->driver->push($message));
-            $this->logger->debug('Successfully pushed message "{name}" to the queue.', ['name' => $message->getPayloadName()]);
+            $this->logger->debug('Successfully pushed message "{name}" to the queue.', ['name' > $message->getPayloadName()]);
         } else {
             $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' => $payload->getName(), 'driver' => get_class($this->driver)]);
             throw new PayloadNotSupportedException($this->driver, $payload);


16) /app/src/Queue.php:91    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $this->eventDispatcher->dispatch(new BeforePush($this, $message));
         if ($this->driver->canPush($message)) {
             $message->setId($this->driver->push($message));
-            $this->logger->debug('Successfully pushed message "{name}" to the queue.', ['name' => $message->getPayloadName()]);
+            $this->logger->debug('Successfully pushed message "{name}" to the queue.', []);
         } else {
             $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' => $payload->getName(), 'driver' => get_class($this->driver)]);
             throw new PayloadNotSupportedException($this->driver, $payload);


17) /app/src/Queue.php:94    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $message->setId($this->driver->push($message));
             $this->logger->debug('Successfully pushed message "{name}" to the queue.', ['name' => $message->getPayloadName()]);
         } else {
-            $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' => $payload->getName(), 'driver' => get_class($this->driver)]);
+            
             throw new PayloadNotSupportedException($this->driver, $payload);
         }
         $this->eventDispatcher->dispatch(new AfterPush($this, $message));


18) /app/src/Queue.php:96    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $message->setId($this->driver->push($message));
             $this->logger->debug('Successfully pushed message "{name}" to the queue.', ['name' => $message->getPayloadName()]);
         } else {
-            $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' => $payload->getName(), 'driver' => get_class($this->driver)]);
+            $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['driver' => get_class($this->driver)]);
             throw new PayloadNotSupportedException($this->driver, $payload);
         }
         $this->eventDispatcher->dispatch(new AfterPush($this, $message));


19) /app/src/Queue.php:97    [M] ArrayItem

--- Original
+++ New
@@ @@
             $message->setId($this->driver->push($message));
             $this->logger->debug('Successfully pushed message "{name}" to the queue.', ['name' => $message->getPayloadName()]);
         } else {
-            $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' => $payload->getName(), 'driver' => get_class($this->driver)]);
+            $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' > $payload->getName(), 'driver' => get_class($this->driver)]);
             throw new PayloadNotSupportedException($this->driver, $payload);
         }
         $this->eventDispatcher->dispatch(new AfterPush($this, $message));


20) /app/src/Queue.php:98    [M] ArrayItem

--- Original
+++ New
@@ @@
             $message->setId($this->driver->push($message));
             $this->logger->debug('Successfully pushed message "{name}" to the queue.', ['name' => $message->getPayloadName()]);
         } else {
-            $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' => $payload->getName(), 'driver' => get_class($this->driver)]);
+            $this->logger->error('Payload "{payload}" is not supported by driver "{driver}."', ['payload' => $payload->getName(), 'driver' > get_class($this->driver)]);
             throw new PayloadNotSupportedException($this->driver, $payload);
         }
         $this->eventDispatcher->dispatch(new AfterPush($this, $message));


21) /app/src/Queue.php:115    [M] DecrementInteger

--- Original
+++ New
@@ @@
      *
      * @param int $max
      */
-    public function run(int $max = 0) : void
+    public function run(int $max = -1) : void
     {
         $this->logger->debug('Start processing queue messages.');
         $count = 0;


22) /app/src/Queue.php:117    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function run(int $max = 0) : void
     {
-        $this->logger->debug('Start processing queue messages.');
+        
         $count = 0;
         while (($max <= 0 || $max > $count) && $this->loop->canContinue() && ($message = $this->driver->nextMessage())) {
             $this->handle($message);


23) /app/src/Queue.php:129    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->handle($message);
             $count++;
         }
-        $this->logger->debug('Finish processing queue messages. There were {count} messages to work with.', ['count' => $count]);
+        
     }
     /**
      * Listen to the queue and execute jobs as they come


24) /app/src/Queue.php:131    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->handle($message);
             $count++;
         }
-        $this->logger->debug('Finish processing queue messages. There were {count} messages to work with.', ['count' => $count]);
+        $this->logger->debug('Finish processing queue messages. There were {count} messages to work with.', []);
     }
     /**
      * Listen to the queue and execute jobs as they come


25) /app/src/Queue.php:140    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function listen() : void
     {
-        $this->logger->debug('Start listening to the queue.');
+        
         $this->driver->subscribe(fn(MessageInterface $message) => $this->handle($message));
         $this->logger->debug('Finish listening to the queue.');
     }


26) /app/src/Queue.php:142    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->logger->debug('Start listening to the queue.');
         $this->driver->subscribe(fn(MessageInterface $message) => $this->handle($message));
-        $this->logger->debug('Finish listening to the queue.');
+        
     }
     /**
      * @param string $id A message id


27) /app/src/Queue.php:183    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     protected function messageConvert(MessageInterface $message, array $metaOverwrite) : PayloadInterface
     {
-        $meta = array_merge($message->getPayloadMeta(), $metaOverwrite);
+        $meta = $metaOverwrite;
         return new BasicPayload($message->getPayloadName(), $message->getPayloadData(), $meta);
     }
 }


28) /app/src/Worker/Worker.php:50    [M] ArrayItem

--- Original
+++ New
@@ @@
      */
     public function process(MessageInterface $message, Queue $queue) : void
     {
-        $this->logger->debug('Start working with message #{message}.', ['message' => $message->getId()]);
+        $this->logger->debug('Start working with message #{message}.', ['message' > $message->getId()]);
         $name = $message->getPayloadName();
         $handler = $this->getHandler($name);
         if ($handler === null) {


29) /app/src/Worker/Worker.php:50    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function process(MessageInterface $message, Queue $queue) : void
     {
-        $this->logger->debug('Start working with message #{message}.', ['message' => $message->getId()]);
+        $this->logger->debug('Start working with message #{message}.', []);
         $name = $message->getPayloadName();
         $handler = $this->getHandler($name);
         if ($handler === null) {


30) /app/src/Worker/Worker.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function process(MessageInterface $message, Queue $queue) : void
     {
-        $this->logger->debug('Start working with message #{message}.', ['message' => $message->getId()]);
+        
         $name = $message->getPayloadName();
         $handler = $this->getHandler($name);
         if ($handler === null) {


31) /app/src/Worker/Worker.php:68    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $event = new AfterExecution($queue, $message);
                 $this->dispatcher->dispatch($event);
             } else {
-                $this->logger->notice('Execution of message #{message} is stopped by an event handler.', ['message' => $message->getId()]);
+                
             }
         } catch (Throwable $exception) {
             $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' => $message->getId(), 'exception' => $exception->getMessage()]);


32) /app/src/Worker/Worker.php:70    [M] ArrayItem

--- Original
+++ New
@@ @@
                 $event = new AfterExecution($queue, $message);
                 $this->dispatcher->dispatch($event);
             } else {
-                $this->logger->notice('Execution of message #{message} is stopped by an event handler.', ['message' => $message->getId()]);
+                $this->logger->notice('Execution of message #{message} is stopped by an event handler.', ['message' > $message->getId()]);
             }
         } catch (Throwable $exception) {
             $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' => $message->getId(), 'exception' => $exception->getMessage()]);


33) /app/src/Worker/Worker.php:70    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $event = new AfterExecution($queue, $message);
                 $this->dispatcher->dispatch($event);
             } else {
-                $this->logger->notice('Execution of message #{message} is stopped by an event handler.', ['message' => $message->getId()]);
+                $this->logger->notice('Execution of message #{message} is stopped by an event handler.', []);
             }
         } catch (Throwable $exception) {
             $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' => $message->getId(), 'exception' => $exception->getMessage()]);


34) /app/src/Worker/Worker.php:74    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->logger->notice('Execution of message #{message} is stopped by an event handler.', ['message' => $message->getId()]);
             }
         } catch (Throwable $exception) {
-            $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' => $message->getId(), 'exception' => $exception->getMessage()]);
+            
             $event = new JobFailure($queue, $message, $exception);
             $this->dispatcher->dispatch($event);
             if ($event->shouldThrowException() === true) {


35) /app/src/Worker/Worker.php:76    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $this->logger->notice('Execution of message #{message} is stopped by an event handler.', ['message' => $message->getId()]);
             }
         } catch (Throwable $exception) {
-            $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' => $message->getId(), 'exception' => $exception->getMessage()]);
+            $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['exception' => $exception->getMessage()]);
             $event = new JobFailure($queue, $message, $exception);
             $this->dispatcher->dispatch($event);
             if ($event->shouldThrowException() === true) {


36) /app/src/Worker/Worker.php:77    [M] ArrayItem

--- Original
+++ New
@@ @@
                 $this->logger->notice('Execution of message #{message} is stopped by an event handler.', ['message' => $message->getId()]);
             }
         } catch (Throwable $exception) {
-            $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' => $message->getId(), 'exception' => $exception->getMessage()]);
+            $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' > $message->getId(), 'exception' => $exception->getMessage()]);
             $event = new JobFailure($queue, $message, $exception);
             $this->dispatcher->dispatch($event);
             if ($event->shouldThrowException() === true) {


37) /app/src/Worker/Worker.php:78    [M] ArrayItem

--- Original
+++ New
@@ @@
                 $this->logger->notice('Execution of message #{message} is stopped by an event handler.', ['message' => $message->getId()]);
             }
         } catch (Throwable $exception) {
-            $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' => $message->getId(), 'exception' => $exception->getMessage()]);
+            $this->logger->error("Processing of message #{message} is stopped because of an exception:\n{exception}.", ['message' => $message->getId(), 'exception' > $exception->getMessage()]);
             $event = new JobFailure($queue, $message, $exception);
             $this->dispatcher->dispatch($event);
             if ($event->shouldThrowException() === true) {


38) /app/src/Worker/Worker.php:121    [M] LogicalAnd

--- Original
+++ New
@@ @@
      */
     private function isAlias($handler) : bool
     {
-        return is_array($handler) && array_keys($handler) === [0, 1] && is_string($handler[0]);
+        return is_array($handler) && array_keys($handler) === [0, 1] || is_string($handler[0]);
     }
 }


39) /app/src/Worker/Worker.php:121    [M] LogicalAnd

--- Original
+++ New
@@ @@
      */
     private function isAlias($handler) : bool
     {
-        return is_array($handler) && array_keys($handler) === [0, 1] && is_string($handler[0]);
+        return (is_array($handler) || array_keys($handler) === [0, 1]) && is_string($handler[0]);
     }
 }


40) /app/src/Worker/Worker.php:123    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     private function isAlias($handler) : bool
     {
-        return is_array($handler) && array_keys($handler) === [0, 1] && is_string($handler[0]);
+        return is_array($handler) && array_keys($handler) === [0, 1] && is_string($handler[1]);
     }
 }


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /app/src/Cli/SignalLoop.php:51    [M] Foreach_

--- Original
+++ New
@@ @@
     public function __construct()
     {
         if (extension_loaded('pcntl')) {
-            foreach ($this->exitSignals as $signal) {
+            foreach (array() as $signal) {
                 pcntl_signal($signal, fn() => $this->exit = true);
             }
             foreach ($this->suspendSignals as $signal) {


2) /app/src/Cli/SignalLoop.php:52    [M] TrueValue

--- Original
+++ New
@@ @@
     {
         if (extension_loaded('pcntl')) {
             foreach ($this->exitSignals as $signal) {
-                pcntl_signal($signal, fn() => $this->exit = true);
+                pcntl_signal($signal, fn() => $this->exit = false);
             }
             foreach ($this->suspendSignals as $signal) {
                 pcntl_signal($signal, fn() => $this->pause = true);


3) /app/src/Cli/SignalLoop.php:52    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     {
         if (extension_loaded('pcntl')) {
             foreach ($this->exitSignals as $signal) {
-                pcntl_signal($signal, fn() => $this->exit = true);
+                
             }
             foreach ($this->suspendSignals as $signal) {
                 pcntl_signal($signal, fn() => $this->pause = true);


4) /app/src/Cli/SignalLoop.php:54    [M] Foreach_

--- Original
+++ New
@@ @@
             foreach ($this->exitSignals as $signal) {
                 pcntl_signal($signal, fn() => $this->exit = true);
             }
-            foreach ($this->suspendSignals as $signal) {
+            foreach (array() as $signal) {
                 pcntl_signal($signal, fn() => $this->pause = true);
             }
             foreach ($this->resumeSignals as $signal) {


5) /app/src/Cli/SignalLoop.php:55    [M] TrueValue

--- Original
+++ New
@@ @@
                 pcntl_signal($signal, fn() => $this->exit = true);
             }
             foreach ($this->suspendSignals as $signal) {
-                pcntl_signal($signal, fn() => $this->pause = true);
+                pcntl_signal($signal, fn() => $this->pause = false);
             }
             foreach ($this->resumeSignals as $signal) {
                 pcntl_signal($signal, fn() => $this->pause = false);


6) /app/src/Cli/SignalLoop.php:55    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
                 pcntl_signal($signal, fn() => $this->exit = true);
             }
             foreach ($this->suspendSignals as $signal) {
-                pcntl_signal($signal, fn() => $this->pause = true);
+                
             }
             foreach ($this->resumeSignals as $signal) {
                 pcntl_signal($signal, fn() => $this->pause = false);


7) /app/src/Cli/SignalLoop.php:57    [M] Foreach_

--- Original
+++ New
@@ @@
             foreach ($this->suspendSignals as $signal) {
                 pcntl_signal($signal, fn() => $this->pause = true);
             }
-            foreach ($this->resumeSignals as $signal) {
+            foreach (array() as $signal) {
                 pcntl_signal($signal, fn() => $this->pause = false);
             }
         }


8) /app/src/Cli/SignalLoop.php:58    [M] FalseValue

--- Original
+++ New
@@ @@
                 pcntl_signal($signal, fn() => $this->pause = true);
             }
             foreach ($this->resumeSignals as $signal) {
-                pcntl_signal($signal, fn() => $this->pause = false);
+                pcntl_signal($signal, fn() => $this->pause = true);
             }
         }
     }


9) /app/src/Cli/SignalLoop.php:58    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
                 pcntl_signal($signal, fn() => $this->pause = true);
             }
             foreach ($this->resumeSignals as $signal) {
-                pcntl_signal($signal, fn() => $this->pause = false);
+                
             }
         }
     }


10) /app/src/Cli/SignalLoop.php:71    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     public function canContinue() : bool
     {
         if (extension_loaded('pcntl')) {
-            pcntl_signal_dispatch();
+            
             // Wait for resume signal until loop is suspended
             while ($this->pause && !$this->exit) {
                 usleep(10000);


11) /app/src/Cli/SignalLoop.php:73    [M] LogicalNot

--- Original
+++ New
@@ @@
         if (extension_loaded('pcntl')) {
             pcntl_signal_dispatch();
             // Wait for resume signal until loop is suspended
-            while ($this->pause && !$this->exit) {
+            while ($this->pause && $this->exit) {
                 usleep(10000);
                 pcntl_signal_dispatch();
             }


12) /app/src/Cli/SignalLoop.php:73    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (extension_loaded('pcntl')) {
             pcntl_signal_dispatch();
             // Wait for resume signal until loop is suspended
-            while ($this->pause && !$this->exit) {
+            while ($this->pause || !$this->exit) {
                 usleep(10000);
                 pcntl_signal_dispatch();
             }


13) /app/src/Cli/SignalLoop.php:74    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
             pcntl_signal_dispatch();
             // Wait for resume signal until loop is suspended
             while ($this->pause && !$this->exit) {
-                usleep(10000);
+                
                 pcntl_signal_dispatch();
             }
         }


14) /app/src/Cli/SignalLoop.php:74    [M] IncrementInteger

--- Original
+++ New
@@ @@
             pcntl_signal_dispatch();
             // Wait for resume signal until loop is suspended
             while ($this->pause && !$this->exit) {
-                usleep(10000);
+                usleep(10001);
                 pcntl_signal_dispatch();
             }
         }


15) /app/src/Cli/SignalLoop.php:74    [M] DecrementInteger

--- Original
+++ New
@@ @@
             pcntl_signal_dispatch();
             // Wait for resume signal until loop is suspended
             while ($this->pause && !$this->exit) {
-                usleep(10000);
+                usleep(9999);
                 pcntl_signal_dispatch();
             }
         }


16) /app/src/Cli/SignalLoop.php:75    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
             // Wait for resume signal until loop is suspended
             while ($this->pause && !$this->exit) {
                 usleep(10000);
-                pcntl_signal_dispatch();
+                
             }
         }
         return !$this->exit;


17) /app/src/Cli/SignalLoop.php:82    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return !$this->exit;
     }
-    public function setResumeSignals(array $resumeSignals) : void
+    protected function setResumeSignals(array $resumeSignals) : void
     {
         $this->resumeSignals = $resumeSignals;
     }


18) /app/src/Cli/SignalLoop.php:87    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->resumeSignals = $resumeSignals;
     }
-    public function setSuspendSignals(array $suspendSignals) : void
+    protected function setSuspendSignals(array $suspendSignals) : void
     {
         $this->suspendSignals = $suspendSignals;
     }
 }


19) /app/src/Command/ListenCommand.php:22    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private Queue $queue;
     public function __construct(?string $name, Queue $queue)
     {
-        parent::__construct($name);
+        
         $this->queue = $queue;
         $this->setDescription('Listens the queue and executes messages as they come. Needs to be stopped manually.');
     }


20) /app/src/Command/ListenCommand.php:24    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         parent::__construct($name);
         $this->queue = $queue;
-        $this->setDescription('Listens the queue and executes messages as they come. Needs to be stopped manually.');
+        
     }
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {


21) /app/src/Command/ListenCommand.php:29    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {
-        $this->queue->listen();
+        
         return 0;
     }
 }


22) /app/src/Command/ListenCommand.php:31    [M] DecrementInteger

--- Original
+++ New
@@ @@
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {
         $this->queue->listen();
-        return 0;
+        return -1;
     }
 }


23) /app/src/Command/ListenCommand.php:31    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {
         $this->queue->listen();
-        return 0;
+        return 1;
     }
 }


24) /app/src/Command/RunCommand.php:19    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private Queue $queue;
     public function __construct(?string $name, Queue $queue)
     {
-        parent::__construct($name);
+        
         $this->queue = $queue;
         $this->setDescription('Runs all the existing messages in the queue. Exits once messages are over.');
     }


25) /app/src/Command/RunCommand.php:22    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         parent::__construct($name);
         $this->queue = $queue;
-        $this->setDescription('Runs all the existing messages in the queue. Exits once messages are over.');
+        
     }
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {


26) /app/src/Command/RunCommand.php:27    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {
-        $this->queue->run();
+        
         return 0;
     }
 }


27) /app/src/Command/RunCommand.php:29    [M] DecrementInteger

--- Original
+++ New
@@ @@
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {
         $this->queue->run();
-        return 0;
+        return -1;
     }
 }


28) /app/src/Command/RunCommand.php:29    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {
         $this->queue->run();
-        return 0;
+        return 1;
     }
 }


29) /app/src/Driver/SynchronousDriver.php:32    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function __destruct()
     {
-        $this->run([$this->worker, 'process']);
+        $this->run(['process']);
     }
     public function nextMessage() : ?MessageInterface
     {


30) /app/src/Driver/SynchronousDriver.php:32    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function __destruct()
     {
-        $this->run([$this->worker, 'process']);
+        
     }
     public function nextMessage() : ?MessageInterface
     {


31) /app/src/Driver/SynchronousDriver.php:53    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $id = (int) $id;
         if ($id < 0) {
-            throw new InvalidArgumentException('This driver ids starts with 0');
+            new InvalidArgumentException('This driver ids starts with 0');
         }
         if ($id < $this->current) {
             return JobStatus::done();


32) /app/src/Driver/SynchronousDriver.php:64    [M] Throw_

--- Original
+++ New
@@ @@
         if (isset($this->messages[$id])) {
             return JobStatus::waiting();
         }
-        throw new InvalidArgumentException('There is no message with the given id.');
+        new InvalidArgumentException('There is no message with the given id.');
     }
     public function push(MessageInterface $message) : string
     {


33) /app/src/Enum/JobStatus.php:20    [M] Throw_

--- Original
+++ New
@@ @@
     protected function __construct(int $status)
     {
         if (!in_array($status, $this->available(), true)) {
-            throw new InvalidStatusException($status);
+            new InvalidStatusException($status);
         }
         $this->status = $status;
     }


34) /app/src/Event/AfterExecution.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->queue = $queue;
         $this->message = $message;
     }
-    public function getMessage() : MessageInterface
+    protected function getMessage() : MessageInterface
     {
         return $this->message;
     }


35) /app/src/Event/AfterExecution.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->message;
     }
-    public function getQueue() : Queue
+    protected function getQueue() : Queue
     {
         return $this->queue;
     }
 }


36) /app/src/Event/AfterPush.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->queue = $queue;
         $this->message = $message;
     }
-    public function getMessage() : MessageInterface
+    protected function getMessage() : MessageInterface
     {
         return $this->message;
     }


37) /app/src/Event/AfterPush.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->message;
     }
-    public function getQueue() : Queue
+    protected function getQueue() : Queue
     {
         return $this->queue;
     }
 }


38) /app/src/Event/BeforeExecution.php:22    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->queue = $queue;
         $this->message = $message;
     }
-    public function getMessage() : MessageInterface
+    protected function getMessage() : MessageInterface
     {
         return $this->message;
     }


39) /app/src/Event/BeforeExecution.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->message;
     }
-    public function getQueue() : Queue
+    protected function getQueue() : Queue
     {
         return $this->queue;
     }


40) /app/src/Event/BeforePush.php:22    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->queue = $queue;
         $this->message = $message;
     }
-    public function getMessage() : MessageInterface
+    protected function getMessage() : MessageInterface
     {
         return $this->message;
     }


41) /app/src/Event/BeforePush.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->message;
     }
-    public function getQueue() : Queue
+    protected function getQueue() : Queue
     {
         return $this->queue;
     }


42) /app/src/Event/BeforePush.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->queue;
     }
-    public function isExecutionStopped() : bool
+    protected function isExecutionStopped() : bool
     {
         return $this->stop;
     }


43) /app/src/Event/BeforePush.php:37    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->stop;
     }
-    public function stopExecution() : void
+    protected function stopExecution() : void
     {
         $this->stop = true;
     }
 }


44) /app/src/Event/BeforePush.php:39    [M] TrueValue

--- Original
+++ New
@@ @@
     }
     public function stopExecution() : void
     {
-        $this->stop = true;
+        $this->stop = false;
     }
 }


45) /app/src/Event/JobFailure.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->throw = false;
     }
-    public function stopPropagation() : void
+    protected function stopPropagation() : void
     {
         $this->stop = true;
     }


46) /app/src/Event/JobFailure.php:54    [M] TrueValue

--- Original
+++ New
@@ @@
     }
     public function stopPropagation() : void
     {
-        $this->stop = true;
+        $this->stop = false;
     }
     public function isPropagationStopped() : bool
     {


47) /app/src/Exception/InvalidStatusException.php:15    [M] DecrementInteger

--- Original
+++ New
@@ @@
 class InvalidStatusException extends InvalidArgumentException implements FriendlyExceptionInterface
 {
     private int $status;
-    public function __construct(int $status, string $message = '', $code = 0, Throwable $previous = null)
+    public function __construct(int $status, string $message = '', $code = -1, Throwable $previous = null)
     {
         if ($message === '') {
             $message = "Invalid status provided: {$status}";


48) /app/src/Exception/InvalidStatusException.php:15    [M] OneZeroInteger

--- Original
+++ New
@@ @@
 class InvalidStatusException extends InvalidArgumentException implements FriendlyExceptionInterface
 {
     private int $status;
-    public function __construct(int $status, string $message = '', $code = 0, Throwable $previous = null)
+    public function __construct(int $status, string $message = '', $code = 1, Throwable $previous = null)
     {
         if ($message === '') {
             $message = "Invalid status provided: {$status}";


49) /app/src/Exception/InvalidStatusException.php:17    [M] Identical

--- Original
+++ New
@@ @@
     private int $status;
     public function __construct(int $status, string $message = '', $code = 0, Throwable $previous = null)
     {
-        if ($message === '') {
+        if ($message !== '') {
             $message = "Invalid status provided: {$status}";
         }
         parent::__construct($message, $code, $previous);


50) /app/src/Exception/InvalidStatusException.php:20    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($message === '') {
             $message = "Invalid status provided: {$status}";
         }
-        parent::__construct($message, $code, $previous);
+        
         $this->status = $status;
     }
     public function getName() : string


51) /app/src/Exception/InvalidStatusException.php:46    [M] PublicVisibility

--- Original
+++ New
@@ @@
      *
      * @return int
      */
-    public function getStatus() : int
+    protected function getStatus() : int
     {
         return $this->status;
     }
 }


52) /app/src/Worker/Worker.php:55    [M] Throw_

--- Original
+++ New
@@ @@
         $name = $message->getPayloadName();
         $handler = $this->getHandler($name);
         if ($handler === null) {
-            throw new RuntimeException("No handler for message {$name}");
+            new RuntimeException("No handler for message {$name}");
         }
         try {
             $event = new BeforeExecution($queue, $message);
